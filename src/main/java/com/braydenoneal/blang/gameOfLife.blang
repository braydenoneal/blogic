gameOfLife;

step = 0;
size = 1;
w = 19;
l = 19;
y = 2;

fn main() {
    step = (step + 1) % size;

    if step != 0 { return; }

    xs = [];

    for x in range(w) {
        zs = [];

        for z in range(l) {
            directions = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];
            n = 0;

            for d in directions {
                if getBlock((x + d[0]) % w, y, (z + d[1]) % l) == block("white_concrete") {
                    n += 1;
                }
            }

            live = 0;

            if n == 3 {
                live = 1;
            } elif n < 2 or n > 3 {
                live = -1;
            }

            zs.append(live);
        }

        xs.append(zs);
    }

    for x in range(w) {
        for z in range(l) {
            live = xs[x][z];

            if live == 1 {
                breakBlock(x, y, z, fn block: true);
                placeBlock(x, y, z, fn item: item == item("white_concrete"));
            } elif live == -1 {
                breakBlock(x, y, z, fn block: true);
                placeBlock(x, y, z, fn item: item == item("black_concrete"));
            }
        }
    }
}

dirtAndOakFarm;

neededItems = [item("moss_block"), item("azalea"), item("bone_meal"), item("iron_shovel")];
exportItems = [item("oak_log"), item("dirt")];

fn main() {
    if !getItems().containsAll(neededItems) { return; }

    placeBlock(-1, 0, 0, fn item: item == item("moss_block"));
    placeBlock(-1, 1, 0, fn item: item == item("azalea"));

    while getBlock(-1, 1, 0) == block("azalea") and getItems().contains(item("bone_meal")) {
        useItem(-1, 1, 0, fn item: item == item("bone_meal"));
    }

    for y in range(1, 8) {
        breakBlock(-1, y, 0, fn block: block == block("oak_log"));
    }

    if getBlock(-1, 1, 0) == block("azalea") { return; }

    useItem(-1, 0, 0, fn item: item == item("iron_shovel"));
    breakBlock(-1, 0, 0, fn block: true);
    exportAllItems(-2, 0, 0, fn item: exportItems.contains(item));
}

treeFarm;

neededItems = [item("oak_sapling"), item("bone_meal")];
keepItems = [item("oak_sapling"), item("bone_meal"), item("oak_log")];

fn main() {
    if !getItems().containsAll(neededItems) { return; }

    placeBlock(0, 2, 0, fn item: item == item("oak_sapling"));

    while getBlock(0, 2, 0) == block("oak_sapling") and getItems().contains(item("bone_meal")) {
        useItem(0, 2, 0, fn item: item == item("bone_meal"));
    }

    for x in range(-2, 3) { for z in range(-2, 3) { for y in range(2, 8) {
        breakBlock(x, y, z, fn block: true);
    }}}

    deleteItems(fn item: !keepItems.contains(item));
}
